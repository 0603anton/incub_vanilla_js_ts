//Замыкания, рекурсия

//Лексическое окружение
// с первой строки кода создаётся лексическое окружение для глобального scope LE
//globalLE = {  } ->(null)
//globalLE = { name:undefined } ->(null) - дошли до первой переменной и далее в том же духе
let name; // на этой строке добавляется в LE ключик name:undefined

name = `alex`

name = 'hanna'
// всё что выше в глобальном scope
// вся работа с переменными это работа со скрытым объектом LE


//Function declaration vs function expression
// если declaration то эта функция уже есть в объекте hoisting -всплытие(читай про var и тд)
//Function declaration
function foo() {

} // это declaration


//function expression - где есть равно это expression
// expression же добавляется в LE когда дойдёт до строки
// если обратиться до момента объявления, то ошибка будет про то что переменная не инициализирована
const bar = () => {
// [[Environment]] -> globalLE - ссылка на глобальную обл видимости, это происходит когда функция рпосто написана


    //barLE {  } -> - ссылка outer (->) копируется из Environment, и вот эта верхняя переменная нужна только для того чтобы в момент вызова мы откуда то могли получить внешний scope
    // с 35 строки с момента выхова, в функции формируется свой объект LE своё локальное лексическое окружение см. выше
// если внутри bar создаём перменные то изменяется уже локальный scope barLE

} //

bar() // как только функцию вызываем мы в неё попадаем и начниаем выполнять код

//https://www.youtube.com/watch?v=auqiji1AHiU&list=PLbLBXDhswD1dtWULFSobOc7JOpUaCAwB7&index=35
// 1^04


// СТЕК - последний пришёл первым вышел - стопочка тарелок LIFO
//очередь FIFO
